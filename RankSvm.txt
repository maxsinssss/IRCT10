from sklearn.svm import SVC
import numpy as np

# Example query-document feature vectors
X = np.array([
    [1, 0],  # Doc 1
    [2, 1],  # Doc 2
    [0, 3],  # Doc 3
    [3, 2]   # Doc 4
])
y = np.array([1, 2, 1, 2])  # Relevance labels

# Create pairwise training samples (X_diff) and labels (1 if doc_i > doc_j)
X_pairs, y_pairs = [], []
for i in range(len(X)):
    for j in range(i + 1, len(X)):
        if y[i] == y[j]:
            continue
        x_diff = X[i] - X[j]
        label = 1 if y[i] > y[j] else 0
        X_pairs.append(x_diff)
        y_pairs.append(label)

X_pairs = np.array(X_pairs)
y_pairs = np.array(y_pairs)

print("Pairwise feature differences (X_pairs):")
print(X_pairs)
print("\nPairwise labels (y_pairs):")
print(y_pairs)

# Train linear SVM on the pairwise data
model = SVC(kernel='linear')
model.fit(X_pairs, y_pairs)

# Display model parameters
print("\nModel trained using RankSVM-style pairwise differences.")
print(f"Weight vector (w): {model.coef_}")
print(f"Intercept (b): {model.intercept_}")

# Optional: Score original documents using learned w
scores = X.dot(model.coef_.flatten()) + model.intercept_[0]
ranking = np.argsort(-scores)  # Sort in descending order of score

print("\nDocument scores:")
for i, score in enumerate(scores):
    print(f"Doc {i+1}: Score = {score:.3f}")

print("\nDocument ranking (highest to lowest):")
for rank, idx in enumerate(ranking, 1):
    print(f"{rank}. Doc {idx+1} (Relevance: {y[idx]})")
